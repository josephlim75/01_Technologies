grep -rnw '/path/to/somewhere/' -e 'pattern'

-r or -R is recursive,
-n is line number, and
-w stands for match the whole word.
-l (lower-case L) can be added to just give the file name of matching files.
Along with these, --exclude, --include, --exclude-dir flags could be used for efficient searching:

This will only search through those files which have .c or .h extensions:
grep --include=\*.{c,h} -rnw '/path/to/somewhere/' -e "pattern"

This will exclude searching all the files ending with .o extension:
grep --exclude=*.o -rnw '/path/to/somewhere/' -e "pattern"

For directories it's possible to exclude a particular directory(ies) through --exclude-dir parameter. 
For example, this will exclude the dirs dir1/, dir2/ and all of them matching *.dst/:
grep --exclude-dir={dir1,dir2,*.dst} -rnw '/path/to/somewhere/' -e "pattern"

This works very well for me, to achieve almost the same purpose like yours.

For more options check man grep.

-----------------------------------------------------------------------------------------------------------------------------------------------

find ./ -name '*.xml'

-----------------------------------------------------------------------------------------------------------------------------------------------

If the target directory is empty, use find, filter with only directories, filter by name, execute rmdir:

find -type d -name a -exec rmdir {} \;

If you want to recursively delete its contents, replace -exec rmdir {} \; 
  -delete 
    or 
  -prune -exec rm -rf {} \;. 

Other answers include details about these versions, credit them too.